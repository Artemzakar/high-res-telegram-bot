import logging
import os

from aiogram import Bot, F, Router, types
from aiogram.filters import Command, CommandStart

from bot.utils import (cleanup_file, download_document, download_photo,
                       process_image)

logger = logging.getLogger(__name__)
router = Router()


@router.message(CommandStart())
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_name = message.from_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n–Ø –±–æ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Å–¥–µ–ª–∞—Ç—å –µ–µ –ª—É—á—à–µ!"
    )


@router.message(Command("help"))
async def help_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        "–Ø –±–æ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.\n"
        "2. –Ø –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ –∏ –ø—Ä–∏—à–ª—é —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é.\n\n"
        "<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b> JPG, PNG, JPEG, BMP, WEBP\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–≤—è–∂–∏—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: @a_r_t_e_m74"
    )
    await message.answer(help_text, parse_mode="HTML")


@router.message(F.photo | F.document)
async def process_image_message(message: types.Message, model_session, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞."""
    if message.photo:
        file_path = await download_photo(message.photo[-1], bot)
    elif message.document and message.document.mime_type.startswith("image/"):
        file_path = await download_document(message.document, bot)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç).")
        return

    if file_path:
        await message.answer("–ü–æ–ª—É—á–∏–ª —Ç–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—é —É–ª—É—á—à–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ...")
        enhanced_image_path = await process_image(file_path, model_session)

        if enhanced_image_path:
            try:
                file_size = os.path.getsize(enhanced_image_path)

                if file_size > 10 * 1024 * 1024:  # –õ–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ Telegram (10 MB)
                    await message.answer(
                        "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç."
                    )
                    with open(enhanced_image_path, "rb") as file:
                        await message.answer_document(
                            types.BufferedInputFile(
                                file.read(), filename="enhanced_image.png"
                            ),
                            caption="–í–æ—Ç —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç!",
                        )
                else:
                    with open(enhanced_image_path, "rb") as file:
                        await message.answer_photo(
                            types.BufferedInputFile(
                                file.read(), filename="enhanced_image.png"
                            ),
                            caption="–í–æ—Ç —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è!",
                        )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
                await message.answer(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
                )
            finally:
                cleanup_file(enhanced_image_path)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        cleanup_file(file_path)


@router.message()
async def unknown_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    await message.answer(
        "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏–ª–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ."
    )
